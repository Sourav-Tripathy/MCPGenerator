{"ast":null,"code":"import axios from'axios';const API_URL=process.env.REACT_APP_API_URL||'http://localhost:8000';// Create axios instance with base URL\nconst apiClient=axios.create({baseURL:API_URL,headers:{'Content-Type':'application/json'}});// Add request interceptor for authentication\napiClient.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers['Authorization']=`Bearer ${token}`;}return config;},error=>Promise.reject(error));// Authentication services\nconst authService={login:async(email,password)=>{const response=await apiClient.post('/auth/signin',{email,password});if(response.data.token){localStorage.setItem('token',response.data.token);}return response.data;},register:async(email,password)=>{const response=await apiClient.post('/auth/signup',{email,password});if(response.data.token){localStorage.setItem('token',response.data.token);}return response.data;},logout:()=>{localStorage.removeItem('token');}};// MCP Generator services\nconst mcpService={// Generate MCP server\ngenerateMCPServer:async(docUrl,requestMessage,apiCredentials)=>{return apiClient.post('/generators/generate',{doc_url:docUrl,request_message:requestMessage,api_credentials:apiCredentials});},// Check generation status\ncheckHealth:async()=>{return apiClient.get('/health');},// Get list of templates\ngetTemplates:async()=>{return apiClient.get('/generators/list-templates');},// Get generated files for a template\ngetTemplateFiles:async templateId=>{return apiClient.get(`/generators/template-files/${templateId}`);},// Get file content\ngetFileContent:async(templateId,filePath)=>{return apiClient.get(`/generators/file-content/${templateId}`,{params:{file_path:filePath}});}};export{authService,mcpService};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","authService","login","email","password","response","post","data","setItem","register","logout","removeItem","mcpService","generateMCPServer","docUrl","requestMessage","apiCredentials","doc_url","request_message","api_credentials","checkHealth","get","getTemplates","getTemplateFiles","templateId","getFileContent","filePath","params","file_path"],"sources":["/Users/takshitmathur/Desktop/MCPGenerator/frontend/src/api/mcpService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Create axios instance with base URL\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add request interceptor for authentication\napiClient.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Authentication services\nconst authService = {\n  login: async (email, password) => {\n    const response = await apiClient.post('/auth/signin', { email, password });\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n    }\n    return response.data;\n  },\n  \n  register: async (email, password) => {\n    const response = await apiClient.post('/auth/signup', { email, password });\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n    }\n    return response.data;\n  },\n  \n  logout: () => {\n    localStorage.removeItem('token');\n  }\n};\n\n// MCP Generator services\nconst mcpService = {\n  // Generate MCP server\n  generateMCPServer: async (docUrl, requestMessage, apiCredentials) => {\n    return apiClient.post('/generators/generate', {\n      doc_url: docUrl,\n      request_message: requestMessage,\n      api_credentials: apiCredentials\n    });\n  },\n  \n  // Check generation status\n  checkHealth: async () => {\n    return apiClient.get('/health');\n  },\n  \n  // Get list of templates\n  getTemplates: async () => {\n    return apiClient.get('/generators/list-templates');\n  },\n  \n  // Get generated files for a template\n  getTemplateFiles: async (templateId) => {\n    return apiClient.get(`/generators/template-files/${templateId}`);\n  },\n  \n  // Get file content\n  getFileContent: async (templateId, filePath) => {\n    return apiClient.get(`/generators/file-content/${templateId}`, {\n      params: { file_path: filePath }\n    });\n  }\n};\n\nexport { authService, mcpService }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}