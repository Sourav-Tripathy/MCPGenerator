{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Create axios instance with base URL\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor for authentication\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Authentication services\nconst authService = {\n  login: async (email, password) => {\n    const response = await apiClient.post('/auth/signin', {\n      email,\n      password\n    });\n    if (response.data.session) {\n      localStorage.setItem('token', response.data.session);\n    }\n    return response.data;\n  },\n  register: async (email, password) => {\n    const response = await apiClient.post('/auth/signup', {\n      email,\n      password\n    });\n    if (response.data.session) {\n      localStorage.setItem('token', response.data.session);\n    }\n    return response.data;\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n  }\n};\n\n// MCP Generator services\nconst mcpService = {\n  // Generate MCP server\n  generateMCPServer: async (docUrl, requestMessage, apiCredentials) => {\n    return apiClient.post('/generators/generate', {\n      doc_url: docUrl,\n      request_message: requestMessage,\n      api_credentials: apiCredentials\n    });\n  },\n  // Check generation status\n  checkHealth: async () => {\n    return apiClient.get('/health');\n  },\n  // Get list of templates\n  getTemplates: async () => {\n    return apiClient.get('/generators/list-templates');\n  },\n  // Get generated files for a template\n  getTemplateFiles: async templateId => {\n    return apiClient.get(`/generators/template-files/${templateId}`);\n  },\n  // Get file content\n  getFileContent: async (templateId, filePath) => {\n    return apiClient.get(`/generators/file-content/${templateId}`, {\n      params: {\n        file_path: filePath\n      }\n    });\n  }\n};\nexport { authService, mcpService };","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","authService","login","email","password","response","post","data","session","setItem","register","logout","removeItem","mcpService","generateMCPServer","docUrl","requestMessage","apiCredentials","doc_url","request_message","api_credentials","checkHealth","get","getTemplates","getTemplateFiles","templateId","getFileContent","filePath","params","file_path"],"sources":["/Users/takshitmathur/Desktop/MCPGenerator/frontend/src/api/mcpService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Create axios instance with base URL\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add request interceptor for authentication\napiClient.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Authentication services\nconst authService = {\n  login: async (email, password) => {\n    const response = await apiClient.post('/auth/signin', { email, password });\n    if (response.data.session) {\n      localStorage.setItem('token', response.data.session);\n    }\n    return response.data;\n  },\n  \n  register: async (email, password) => {\n    const response = await apiClient.post('/auth/signup', { email, password });\n    if (response.data.session) {\n      localStorage.setItem('token', response.data.session);\n    }\n    return response.data;\n  },\n  \n  logout: () => {\n    localStorage.removeItem('token');\n  }\n};\n\n// MCP Generator services\nconst mcpService = {\n  // Generate MCP server\n  generateMCPServer: async (docUrl, requestMessage, apiCredentials) => {\n    return apiClient.post('/generators/generate', {\n      doc_url: docUrl,\n      request_message: requestMessage,\n      api_credentials: apiCredentials\n    });\n  },\n  \n  // Check generation status\n  checkHealth: async () => {\n    return apiClient.get('/health');\n  },\n  \n  // Get list of templates\n  getTemplates: async () => {\n    return apiClient.get('/generators/list-templates');\n  },\n  \n  // Get generated files for a template\n  getTemplateFiles: async (templateId) => {\n    return apiClient.get(`/generators/template-files/${templateId}`);\n  },\n  \n  // Get file content\n  getFileContent: async (templateId, filePath) => {\n    return apiClient.get(`/generators/file-content/${templateId}`, {\n      params: { file_path: filePath }\n    });\n  }\n};\n\nexport { authService, mcpService }; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;;AAExE;AACA,MAAMC,SAAS,GAAGL,KAAK,CAACM,MAAM,CAAC;EAC7BC,OAAO,EAAEN,OAAO;EAChBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,SAAS,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAI,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACA,MAAMG,WAAW,GAAG;EAClBC,KAAK,EAAE,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAChC,MAAMC,QAAQ,GAAG,MAAMlB,SAAS,CAACmB,IAAI,CAAC,cAAc,EAAE;MAAEH,KAAK;MAAEC;IAAS,CAAC,CAAC;IAC1E,IAAIC,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;MACzBZ,YAAY,CAACa,OAAO,CAAC,OAAO,EAAEJ,QAAQ,CAACE,IAAI,CAACC,OAAO,CAAC;IACtD;IACA,OAAOH,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDG,QAAQ,EAAE,MAAAA,CAAOP,KAAK,EAAEC,QAAQ,KAAK;IACnC,MAAMC,QAAQ,GAAG,MAAMlB,SAAS,CAACmB,IAAI,CAAC,cAAc,EAAE;MAAEH,KAAK;MAAEC;IAAS,CAAC,CAAC;IAC1E,IAAIC,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;MACzBZ,YAAY,CAACa,OAAO,CAAC,OAAO,EAAEJ,QAAQ,CAACE,IAAI,CAACC,OAAO,CAAC;IACtD;IACA,OAAOH,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDI,MAAM,EAAEA,CAAA,KAAM;IACZf,YAAY,CAACgB,UAAU,CAAC,OAAO,CAAC;EAClC;AACF,CAAC;;AAED;AACA,MAAMC,UAAU,GAAG;EACjB;EACAC,iBAAiB,EAAE,MAAAA,CAAOC,MAAM,EAAEC,cAAc,EAAEC,cAAc,KAAK;IACnE,OAAO9B,SAAS,CAACmB,IAAI,CAAC,sBAAsB,EAAE;MAC5CY,OAAO,EAAEH,MAAM;MACfI,eAAe,EAAEH,cAAc;MAC/BI,eAAe,EAAEH;IACnB,CAAC,CAAC;EACJ,CAAC;EAED;EACAI,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,OAAOlC,SAAS,CAACmC,GAAG,CAAC,SAAS,CAAC;EACjC,CAAC;EAED;EACAC,YAAY,EAAE,MAAAA,CAAA,KAAY;IACxB,OAAOpC,SAAS,CAACmC,GAAG,CAAC,4BAA4B,CAAC;EACpD,CAAC;EAED;EACAE,gBAAgB,EAAE,MAAOC,UAAU,IAAK;IACtC,OAAOtC,SAAS,CAACmC,GAAG,CAAC,8BAA8BG,UAAU,EAAE,CAAC;EAClE,CAAC;EAED;EACAC,cAAc,EAAE,MAAAA,CAAOD,UAAU,EAAEE,QAAQ,KAAK;IAC9C,OAAOxC,SAAS,CAACmC,GAAG,CAAC,4BAA4BG,UAAU,EAAE,EAAE;MAC7DG,MAAM,EAAE;QAAEC,SAAS,EAAEF;MAAS;IAChC,CAAC,CAAC;EACJ;AACF,CAAC;AAED,SAAS1B,WAAW,EAAEY,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}